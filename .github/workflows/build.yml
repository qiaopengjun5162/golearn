name: Build, Test and Release

on:
  push:
    branches: [ main ]
    tags: [ v* ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'  # 使用次要版本号自动获取最新补丁
  GOLANGCI_LINT_VERSION: v1.64.5

permissions:
  contents: write
  packages: write
  id-token: write  # 需要用于 GitHub OIDC

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        goos: [ linux, darwin, windows ]
        goarch: [ amd64, arm64 ]
        exclude:
          - os: ubuntu-latest
            goos: darwin
          - os: macos-latest
            goos: windows
          - os: windows-latest
            goos: linux
    runs-on: ${{ matrix.os }}
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name:  Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install tools
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@${{ env.GOLANGCI_LINT_VERSION }}
          go install github.com/goreleaser/goreleaser@latest

      - name: Verify code format
        run: |
          [ -z "$(gofmt -l .)" ] || (echo "Run 'gofmt -w .' to fix formatting"; exit 1)

      - name: Run linter
        run: golangci-lint run --out-format=tab --timeout=5m ./...

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out

      - name: Build binaries
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          go build -trimpath -ldflags="-s -w" -o dist/app-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/app


  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        uses: orhun/git-cliff-action@v2
        with:
          config: .cliff.toml
          args: --latest --strip header --prepend CHANGELOG.md

      - name: Create release
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_PREVIOUS_TAG: ${{ github.event.base_ref }}
